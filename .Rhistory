?ggplot
?ggplot()
?ggplot()
install.packages("ggplot2")
?ggplot()
head(mpg)
heaD(mpg)
library(tidyverse)
library(tidyverse)
x <- 3
x<- 5
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
?read.csv()
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
library(jsonlite)
?fromJSON()
demo_table2 <- fromJSON(txt='demo.json')
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
x[3]
demo_table[3,"Year"]
demo_table[3,3]
demo_table$"Vehicle_Class"
demo_table$"Vehicle_Class"[2]
filter_table <- demo_table2[demo_table2$price > 10000,]
?subset()
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
?sample()
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample(1:nrow(demo_table), 3),]
library(tidyverse)
?mutate()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
?gather()
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
long_table1 <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
?spread()
wide_table <- long_table %>% spread(key="Metric",value="Score")
all.equal(demo_table3,wide_table)
?ggplot
?ggplot()
?ggplot()
install.packages("ggplot2")
?ggplot()
install.packages("ggplot2")
head(mpg)
str(mpg)
data()
data(mpg)
load("C:/Users/CALVIN/Desktop/Data-Analytics/Module-15/R_Analysis/01_Demo/.RData")
data(mpg)
head(mpg)
load("C:/Users/CALVIN/Desktop/Data-Analytics/Module-15/R_Analysis/01_Demo/.Rhistory")
setwd("C:/Users/CALVIN/Desktop/Data-Analytics/Challenge-15")
library(dplyr)
mechacar_table <- read.csv('MechaCar_mpg.csv',check.names = F,stringsAsFactors = F) #import used car dataset
View(mechacar_table)
View(mechacar_table)
View(mechacar_table)
View(mechacar_table)
View(mechacar_table)
View(mechacar_table)
View(mechacar_table)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar_table) #generate multiple linear regression model
library(dplyr)
mechacar_table <- read.csv('MechaCar_mpg.csv',check.names = F,stringsAsFactors = F) #import used car dataset
mechacar_lm = lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar_table) #generate multiple linear regression model
summary(mechacar_lm)
View(mechacar_lm)
summary(lm(mpg~vehicle_length+ground_clearance, data=mechacar_table))
library(dplyr)
mechacar_table <- read.csv('MechaCar_mpg.csv',check.names = F,stringsAsFactors = F) #import MechaCar dataset
mechacar_lm = lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar_table) #generate multiple linear regression model
summary(mechacar_lm)
summary(lm(mpg~vehicle_length+ground_clearance, data=mechacar_table))
library(dplyr)
coil_table <- read.csv('Suspension_Coil.csv',check.names = F,stringsAsFactors = F) #import suspension coil dataset
View(coil_table)
?summarize()
total_summary = coil_table %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
View(total_summary)
View(coil_table)
View(coil_table)
lot_summary <- coil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep') #create lot summary table
View(lot_summary)
t.test((total_summary$Mean),mu=1500)
?t.test()
View(total_summary)
t.test(total_summary$Mean,mu=1500)
total_summary$Mean
View(coil_table)
t.test(coil_table$PSI,mu=1500)
t.test(coil_table$PSI,mu=1500,subset='Lot1')
t.test(coil_table$PSI,mu=1500,subset='Lot1')
t.test(coil_table$PSI,mu=1500,subset='Lot2')
t.test(coil_table$PSI,mu=1500,subset='Lot3')
t.test(coil_table$PSI,mu=1500,subset=Lot1)
?subset()
View(coil_table)
t.test(coil_table$PSI,mu=1500,subset(coiltable$Manufacturing_lot == 'Lot1'))
t.test(coil_table$PSI,mu=1500,subset(coiltable$Manufacturing_lot == Lot1))
t.test(coil_table$PSI,mu=1500,subset(coil_table$Manufacturing_lot == 'Lot1'))
t.test(coil_table$PSI,mu=1500,subset(coil_table$PSI, coil_table$Manufacturing_lot == 'Lot1'))
subset(coil_table$PSI, coil_table$Manufacturing_lot == 'Lot1')
subset(coil_table$Manufacturing_lot == 'Lot1', coil_table$PSI)
subset(coil_table$PSI, coil_table$Manufacturing_lot == Lot1)
subset(coil_table$PSI, coil_table$Manufacturing_Lot == 'Lot1')
t.test(coil_table$PSI,mu=1500,subset(coil_table$PSI, coil_table$Manufacturing_Lot == 'Lot1'))
t.test(subset(coil_table$PSI, coil_table$Manufacturing_Lot == 'Lot1'),mu=1500,)
subset(coil_table$PSI, coil_table$Manufacturing_Lot == 'Lot3')
t.test(subset(coil_table$PSI, coil_table$Manufacturing_Lot == 'Lot1'),mu=1500,) #t-test for lot#1
t.test(subset(coil_table$PSI, coil_table$Manufacturing_Lot == 'Lot2'),mu=1500,) #t-test for lot#2
t.test(subset(coil_table$PSI, coil_table$Manufacturing_Lot == 'Lot3'),mu=1500,) #t-test for lot#3
